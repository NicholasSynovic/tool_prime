check for added large files..............................................Passed
check for case conflicts.................................................Passed
check json...........................................(no files to check)Skipped
check that scripts with shebangs are executable..........................Passed
check for merge conflicts................................................Passed
check for broken symlinks............................(no files to check)Skipped
check toml...............................................................Passed
check xml............................................(no files to check)Skipped
check yaml...............................................................Passed
debug statements (python)................................................Passed
detect destroyed symlinks................................................Passed
detect private key.......................................................Passed
fix end of files.........................................................Passed
fix requirements.txt.................................(no files to check)Skipped
sort simple yaml files...............................(no files to check)Skipped
trim trailing whitespace.................................................Passed
Check package with Pyroma................................................Passed
ruff check...............................................................Failed
- hook id: ruff-check
- exit code: 1

src/api/size.py:1:1: D100 Missing docstring in public module
src/api/size.py:1:1: CPY001 Missing copyright notice at top of file
src/api/size.py:3:1: UP035 `typing.List` is deprecated, use `list` instead
  |
1 | from progress.bar import Bar
2 | from pandas import DataFrame, Series
3 | from typing import List
  | ^^^^^^^^^^^^^^^^^^^^^^^ UP035
4 | import pandas
5 | from src.api.vcs import VersionControlSystem
  |

src/api/size.py:4:8: ICN001 `pandas` should be imported as `pd`
  |
2 | from pandas import DataFrame, Series
3 | from typing import List
4 | import pandas
  |        ^^^^^^ ICN001
5 | from src.api.vcs import VersionControlSystem
6 | import subprocess  # nosec
  |
  = help: Alias `pandas` to `pd`

src/api/size.py:6:8: S404 `subprocess` module is possibly insecure
  |
4 | import pandas
5 | from src.api.vcs import VersionControlSystem
6 | import subprocess  # nosec
  |        ^^^^^^^^^^ S404
7 | from subprocess import CompletedProcess  # nosec
8 | from pathlib import Path
  |

src/api/size.py:7:6: S404 `subprocess` module is possibly insecure
  |
5 | from src.api.vcs import VersionControlSystem
6 | import subprocess  # nosec
7 | from subprocess import CompletedProcess  # nosec
  |      ^^^^^^^^^^ S404
8 | from pathlib import Path
9 | from io import StringIO
  |

src/api/size.py:12:7: D101 Missing docstring in public class
   |
12 | class SCC:
   |       ^^^ D101
13 |     def __init__(self):
14 |         self.command: str = "scc"
   |

src/api/size.py:13:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 | class SCC:
13 |     def __init__(self):
   |         ^^^^^^^^ ANN204
14 |         self.command: str = "scc"
15 |         self.options: List[str] = (
   |
   = help: Add return type annotation: `None`

src/api/size.py:13:9: D107 Missing docstring in `__init__`
   |
12 | class SCC:
13 |     def __init__(self):
   |         ^^^^^^^^ D107
14 |         self.command: str = "scc"
15 |         self.options: List[str] = (
   |

src/api/size.py:15:23: UP006 Use `list` instead of `List` for type annotation
   |
13 |     def __init__(self):
14 |         self.command: str = "scc"
15 |         self.options: List[str] = (
   |                       ^^^^ UP006
16 |             "--format=csv --by-file --no-cocomo --no-complexity --no-min-gen --no-size"
17 |         )
   |
   = help: Replace with `list`

src/api/size.py:19:9: D102 Missing docstring in public method
   |
17 |         )
18 |
19 |     def run(self, repo_path: Path) -> DataFrame:
   |         ^^^ D102
20 |         result: CompletedProcess = subprocess.run(  # nosec
21 |             args=[self.command, self.options, repo_path.__str__()],
   |

src/api/size.py:20:36: PLW1510 `subprocess.run` without explicit `check` argument
   |
19 |     def run(self, repo_path: Path) -> DataFrame:
20 |         result: CompletedProcess = subprocess.run(  # nosec
   |                                    ^^^^^^^^^^^^^^ PLW1510
21 |             args=[self.command, self.options, repo_path.__str__()],
22 |             capture_output=True,
   |
   = help: Add explicit `check=False`

src/api/size.py:21:47: PLC2801 Unnecessary dunder call to `__str__`. Use `str()` builtin.
   |
19 |     def run(self, repo_path: Path) -> DataFrame:
20 |         result: CompletedProcess = subprocess.run(  # nosec
21 |             args=[self.command, self.options, repo_path.__str__()],
   |                                               ^^^^^^^^^^^^^^^^^^^ PLC2801
22 |             capture_output=True,
23 |             text=True,
   |
   = help: Use `str()` builtin

src/api/size.py:28:5: D103 Missing docstring in public function
   |
28 | def compute_size_of_repo(
   |     ^^^^^^^^^^^^^^^^^^^^ D103
29 |     commitsDF: DataFrame,
30 |     vcs: VersionControlSystem,
   |

src/api/size.py:29:5: N803 Argument name `commitsDF` should be lowercase
   |
28 | def compute_size_of_repo(
29 |     commitsDF: DataFrame,
   |     ^^^^^^^^^^^^^^^^^^^^ N803
30 |     vcs: VersionControlSystem,
31 | ) -> DataFrame:
   |

src/api/size.py:32:5: F841 Local variable `data` is assigned to but never used
   |
30 |     vcs: VersionControlSystem,
31 | ) -> DataFrame:
32 |     data: List[DataFrame] = []
   |     ^^^^ F841
33 |
34 |     scc: SCC = SCC()
   |
   = help: Remove assignment to unused variable `data`

src/api/size.py:32:11: UP006 Use `list` instead of `List` for type annotation
   |
30 |     vcs: VersionControlSystem,
31 | ) -> DataFrame:
32 |     data: List[DataFrame] = []
   |           ^^^^ UP006
33 |
34 |     scc: SCC = SCC()
   |
   = help: Replace with `list`

src/api/size.py:39:10: F841 Local variable `bar` is assigned to but never used
   |
37 |         f"Measuring the size of {vcs.repo_path}...",
38 |         max=commitsDF.shape[0],
39 |     ) as bar:
   |          ^^^ F841
40 |         row: Series
41 |         for _, row in commitsDF.iterrows():
   |
   = help: Remove assignment to unused variable `bar`

src/api/size.py:42:13: RUF052 Local dummy variable `_df` is accessed
   |
40 |         row: Series
41 |         for _, row in commitsDF.iterrows():
42 |             _df: DataFrame = scc.run(repo_path=vcs.repo_path)
   |             ^^^ RUF052
43 |             print(_df)
44 |             continue
   |
   = help: Remove leading underscores

src/api/size.py:43:13: T201 `print` found
   |
41 |         for _, row in commitsDF.iterrows():
42 |             _df: DataFrame = scc.run(repo_path=vcs.repo_path)
43 |             print(_df)
   |             ^^^^^ T201
44 |             continue
45 |             vcs.checkout_revision(revision_hash=row["commit_hash"])
   |
   = help: Remove `print`

src/api/vcs.py:1:1: D100 Missing docstring in public module
src/api/vcs.py:1:1: CPY001 Missing copyright notice at top of file
src/api/vcs.py:4:1: UP035 Import from `collections.abc` instead: `Iterator`
  |
2 | from datetime import datetime, timezone
3 | from pathlib import Path
4 | from typing import Any, Iterator, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
5 |
6 | from git import Commit, Repo, TagReference
  |
  = help: Import from `collections.abc`

src/api/vcs.py:4:1: UP035 `typing.List` is deprecated, use `list` instead
  |
2 | from datetime import datetime, timezone
3 | from pathlib import Path
4 | from typing import Any, Iterator, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
5 |
6 | from git import Commit, Repo, TagReference
  |

src/api/vcs.py:4:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
  |
2 | from datetime import datetime, timezone
3 | from pathlib import Path
4 | from typing import Any, Iterator, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
5 |
6 | from git import Commit, Repo, TagReference
  |

src/api/vcs.py:20:5: D205 1 blank line required between summary line and description
   |
19 |   class VersionControlSystem(ABC):
20 | /     """
21 | |     Abstract base class for interacting with version control systems.
22 | |     Defines a common interface for retrieving information about revisions.
23 | |     """
   | |_______^ D205
24 |
25 |       def __init__(self, repo_path: Path):
   |
   = help: Insert single blank line

src/api/vcs.py:20:5: D212 Multi-line docstring summary should start at the first line
   |
19 |   class VersionControlSystem(ABC):
20 | /     """
21 | |     Abstract base class for interacting with version control systems.
22 | |     Defines a common interface for retrieving information about revisions.
23 | |     """
   | |_______^ D212
24 |
25 |       def __init__(self, repo_path: Path):
   |
   = help: Remove whitespace after opening quotes

src/api/vcs.py:25:9: ANN204 Missing return type annotation for special method `__init__`
   |
23 |     """
24 |
25 |     def __init__(self, repo_path: Path):
   |         ^^^^^^^^ ANN204
26 |         """
27 |         Initializes the VersionControlSystem object.
   |
   = help: Add return type annotation: `None`

src/api/vcs.py:26:9: D212 Multi-line docstring summary should start at the first line
   |
25 |       def __init__(self, repo_path: Path):
26 | /         """
27 | |         Initializes the VersionControlSystem object.
28 | |
29 | |         Args:
30 | |             repo_path (Path): Path to the repository.
31 | |         """
   | |___________^ D212
32 |           self.repo_path: Path = repo_path
33 |           self.repo: Repo | Any = self._initialize_repo()
   |
   = help: Remove whitespace after opening quotes

src/api/vcs.py:26:9: D401 First line of docstring should be in imperative mood: "Initializes the VersionControlSystem object."
   |
25 |       def __init__(self, repo_path: Path):
26 | /         """
27 | |         Initializes the VersionControlSystem object.
28 | |
29 | |         Args:
30 | |             repo_path (Path): Path to the repository.
31 | |         """
   | |___________^ D401
32 |           self.repo_path: Path = repo_path
33 |           self.repo: Repo | Any = self._initialize_repo()
   |

src/api/vcs.py:29:9: D413 Missing blank line after last section ("Args")
   |
27 |         Initializes the VersionControlSystem object.
28 |
29 |         Args:
   |         ^^^^ D413
30 |             repo_path (Path): Path to the repository.
31 |         """
   |
   = help: Add blank line after "Args"

src/api/vcs.py:37:31: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_initialize_repo`
   |
36 |     @abstractmethod
37 |     def _initialize_repo() -> Any:
   |                               ^^^ ANN401
38 |         """
39 |         Abstract method to initialize a repository with the proper VCS library.
   |

src/api/vcs.py:38:9: D205 1 blank line required between summary line and description
   |
36 |       @abstractmethod
37 |       def _initialize_repo() -> Any:
38 | /         """
39 | |         Abstract method to initialize a repository with the proper VCS library.
40 | |         Subclasses must implement this method.
41 | |         """
   | |___________^ D205
42 |           pass
   |
   = help: Insert single blank line

src/api/vcs.py:38:9: D212 Multi-line docstring summary should start at the first line
   |
36 |       @abstractmethod
37 |       def _initialize_repo() -> Any:
38 | /         """
39 | |         Abstract method to initialize a repository with the proper VCS library.
40 | |         Subclasses must implement this method.
41 | |         """
   | |___________^ D212
42 |           pass
   |
   = help: Remove whitespace after opening quotes

src/api/vcs.py:42:9: PIE790 Unnecessary `pass` statement
   |
40 |         Subclasses must implement this method.
41 |         """
42 |         pass
   |         ^^^^ PIE790
43 |
44 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/api/vcs.py:45:32: UP006 Use `tuple` instead of `Tuple` for type annotation
   |
44 |     @abstractmethod
45 |     def get_revisions(self) -> Tuple[Any, int]:
   |                                ^^^^^ UP006
46 |         """
47 |         Abstract method to retrieve revisions and the number of revisions.
   |
   = help: Replace with `tuple`

src/api/vcs.py:46:9: D205 1 blank line required between summary line and description
   |
44 |       @abstractmethod
45 |       def get_revisions(self) -> Tuple[Any, int]:
46 | /         """
47 | |         Abstract method to retrieve revisions and the number of revisions.
48 | |         Revisions are retrieved from the oldest revision to the newest.
49 | |         Subclasses must implement this method.
50 | |         """
   | |___________^ D205
51 |           pass
   |
   = help: Insert single blank line

src/api/vcs.py:46:9: D212 Multi-line docstring summary should start at the first line
   |
44 |       @abstractmethod
45 |       def get_revisions(self) -> Tuple[Any, int]:
46 | /         """
47 | |         Abstract method to retrieve revisions and the number of revisions.
48 | |         Revisions are retrieved from the oldest revision to the newest.
49 | |         Subclasses must implement this method.
50 | |         """
   | |___________^ D212
51 |           pass
   |
   = help: Remove whitespace after opening quotes

src/api/vcs.py:51:9: PIE790 Unnecessary `pass` statement
   |
49 |         Subclasses must implement this method.
50 |         """
51 |         pass
   |         ^^^^ PIE790
52 |
53 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/api/vcs.py:54:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `revisions`
   |
53 |     @abstractmethod
54 |     def parse_revisions(self, revisions: Any) -> DataFrame:
   |                                          ^^^ ANN401
55 |         """
56 |         Abstract method to parse a List[Revisions] and extract relevant data
   |

src/api/vcs.py:55:9: D205 1 blank line required between summary line and description
   |
53 |       @abstractmethod
54 |       def parse_revisions(self, revisions: Any) -> DataFrame:
55 | /         """
56 | |         Abstract method to parse a List[Revisions] and extract relevant data
57 | |         Subclasses must implement this method.
58 | |         """
   | |___________^ D205
59 |           pass
   |
   = help: Insert single blank line

src/api/vcs.py:55:9: D212 Multi-line docstring summary should start at the first line
   |
53 |       @abstractmethod
54 |       def parse_revisions(self, revisions: Any) -> DataFrame:
55 | /         """
56 | |         Abstract method to parse a List[Revisions] and extract relevant data
57 | |         Subclasses must implement this method.
58 | |         """
   | |___________^ D212
59 |           pass
   |
   = help: Remove whitespace after opening quotes

src/api/vcs.py:59:9: PIE790 Unnecessary `pass` statement
   |
57 |         Subclasses must implement this method.
58 |         """
59 |         pass
   |         ^^^^ PIE790
60 |
61 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/api/vcs.py:62:9: D102 Missing docstring in public method
   |
61 |     @abstractmethod
62 |     def get_release_revisions(self) -> DataFrame:
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
63 |         pass
   |

src/api/vcs.py:66:9: D102 Missing docstring in public method
   |
65 |     @abstractmethod
66 |     def checkout_revision(self, revision_hash: str) -> None:
   |         ^^^^^^^^^^^^^^^^^ D102
67 |         pass
   |

src/api/vcs.py:70:9: D102 Missing docstring in public method
   |
69 |     @abstractmethod
70 |     def checkout_most_recent_revision(self) -> None:
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
71 |         pass
   |

src/api/vcs.py:74:7: D101 Missing docstring in public class
   |
74 | class Revision:
   |       ^^^^^^^^ D101
75 |     def __init__(
76 |         self,
   |

src/api/vcs.py:75:9: PLR0913 Too many arguments in function definition (13 > 5)
   |
74 | class Revision:
75 |     def __init__(
   |         ^^^^^^^^ PLR0913
76 |         self,
77 |         author: str,
   |

src/api/vcs.py:75:9: PLR0917 Too many positional arguments (13/5)
   |
74 | class Revision:
75 |     def __init__(
   |         ^^^^^^^^ PLR0917
76 |         self,
77 |         author: str,
   |

src/api/vcs.py:75:9: ANN204 Missing return type annotation for special method `__init__`
   |
74 | class Revision:
75 |     def __init__(
   |         ^^^^^^^^ ANN204
76 |         self,
77 |         author: str,
   |
   = help: Add return type annotation: `None`

src/api/vcs.py:75:9: D107 Missing docstring in `__init__`
   |
74 | class Revision:
75 |     def __init__(
   |         ^^^^^^^^ D107
76 |         self,
77 |         author: str,
   |

src/api/vcs.py:78:9: N803 Argument name `authorEmail` should be lowercase
   |
76 |         self,
77 |         author: str,
78 |         authorEmail: str,
   |         ^^^^^^^^^^^^^^^^ N803
79 |         authoredDatetime: datetime,
80 |         coAuthors: List[str],
   |

src/api/vcs.py:79:9: N803 Argument name `authoredDatetime` should be lowercase
   |
77 |         author: str,
78 |         authorEmail: str,
79 |         authoredDatetime: datetime,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
80 |         coAuthors: List[str],
81 |         coAuthorEmails: List[str],
   |

src/api/vcs.py:80:9: N803 Argument name `coAuthors` should be lowercase
   |
78 |         authorEmail: str,
79 |         authoredDatetime: datetime,
80 |         coAuthors: List[str],
   |         ^^^^^^^^^^^^^^^^^^^^ N803
81 |         coAuthorEmails: List[str],
82 |         commitHash: str,
   |

src/api/vcs.py:80:20: UP006 Use `list` instead of `List` for type annotation
   |
78 |         authorEmail: str,
79 |         authoredDatetime: datetime,
80 |         coAuthors: List[str],
   |                    ^^^^ UP006
81 |         coAuthorEmails: List[str],
82 |         commitHash: str,
   |
   = help: Replace with `list`

src/api/vcs.py:81:9: N803 Argument name `coAuthorEmails` should be lowercase
   |
79 |         authoredDatetime: datetime,
80 |         coAuthors: List[str],
81 |         coAuthorEmails: List[str],
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ N803
82 |         commitHash: str,
83 |         committedDatetime: datetime,
   |

src/api/vcs.py:81:25: UP006 Use `list` instead of `List` for type annotation
   |
79 |         authoredDatetime: datetime,
80 |         coAuthors: List[str],
81 |         coAuthorEmails: List[str],
   |                         ^^^^ UP006
82 |         commitHash: str,
83 |         committedDatetime: datetime,
   |
   = help: Replace with `list`

src/api/vcs.py:82:9: N803 Argument name `commitHash` should be lowercase
   |
80 |         coAuthors: List[str],
81 |         coAuthorEmails: List[str],
82 |         commitHash: str,
   |         ^^^^^^^^^^^^^^^ N803
83 |         committedDatetime: datetime,
84 |         committer: str,
   |

src/api/vcs.py:83:9: N803 Argument name `committedDatetime` should be lowercase
   |
81 |         coAuthorEmails: List[str],
82 |         commitHash: str,
83 |         committedDatetime: datetime,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
84 |         committer: str,
85 |         committerEmail: str,
   |

src/api/vcs.py:85:9: N803 Argument name `committerEmail` should be lowercase
   |
83 |         committedDatetime: datetime,
84 |         committer: str,
85 |         committerEmail: str,
   |         ^^^^^^^^^^^^^^^^^^^ N803
86 |         encoding: str,
87 |         message: str,
   |

src/api/vcs.py:89:18: UP006 Use `list` instead of `List` for type annotation
   |
87 |         message: str,
88 |         gpgsign: str,
89 |         parents: List[str],
   |                  ^^^^ UP006
90 |     ):
91 |         self.data: dict[str, Any] = {
   |
   = help: Replace with `list`

src/api/vcs.py:108:7: D101 Missing docstring in public class
    |
108 | class Git(VersionControlSystem):
    |       ^^^ D101
109 |     def __init__(self, repo_path: Path):
110 |         super().__init__(repo_path=repo_path)
    |

src/api/vcs.py:109:9: ANN204 Missing return type annotation for special method `__init__`
    |
108 | class Git(VersionControlSystem):
109 |     def __init__(self, repo_path: Path):
    |         ^^^^^^^^ ANN204
110 |         super().__init__(repo_path=repo_path)
    |
    = help: Add return type annotation: `None`

src/api/vcs.py:109:9: D107 Missing docstring in `__init__`
    |
108 | class Git(VersionControlSystem):
109 |     def __init__(self, repo_path: Path):
    |         ^^^^^^^^ D107
110 |         super().__init__(repo_path=repo_path)
    |

src/api/vcs.py:115:9: D102 Missing docstring in public method
    |
113 |         return Repo(path=self.repo_path)
114 |
115 |     def get_revisions(self) -> Tuple[Iterator[Commit], int]:
    |         ^^^^^^^^^^^^^ D102
116 |         revisionCount: int = sum(1 for _ in self.repo.iter_commits())
117 |         return (
    |

src/api/vcs.py:115:32: UP006 Use `tuple` instead of `Tuple` for type annotation
    |
113 |         return Repo(path=self.repo_path)
114 |
115 |     def get_revisions(self) -> Tuple[Iterator[Commit], int]:
    |                                ^^^^^ UP006
116 |         revisionCount: int = sum(1 for _ in self.repo.iter_commits())
117 |         return (
    |
    = help: Replace with `tuple`

src/api/vcs.py:116:9: N806 Variable `revisionCount` in function should be lowercase
    |
115 |     def get_revisions(self) -> Tuple[Iterator[Commit], int]:
116 |         revisionCount: int = sum(1 for _ in self.repo.iter_commits())
    |         ^^^^^^^^^^^^^ N806
117 |         return (
118 |             self.repo.iter_commits(
    |

src/api/vcs.py:125:9: D102 Missing docstring in public method
    |
123 |         )
124 |
125 |     def parse_revisions(
    |         ^^^^^^^^^^^^^^^ D102
126 |         self,
127 |         revisions: Tuple[Iterator[Commit], int],
    |

src/api/vcs.py:127:20: UP006 Use `tuple` instead of `Tuple` for type annotation
    |
125 |     def parse_revisions(
126 |         self,
127 |         revisions: Tuple[Iterator[Commit], int],
    |                    ^^^^^ UP006
128 |     ) -> DataFrame:
129 |         data: List[dict] = []
    |
    = help: Replace with `tuple`

src/api/vcs.py:129:15: UP006 Use `list` instead of `List` for type annotation
    |
127 |         revisions: Tuple[Iterator[Commit], int],
128 |     ) -> DataFrame:
129 |         data: List[dict] = []
    |               ^^^^ UP006
130 |
131 |         with Bar(
    |
    = help: Replace with `list`

src/api/vcs.py:144:89: RUF100 Unused `noqa` directive (unused: `E501`)
    |
142 |                             tz=timezone.utc
143 |                         ),
144 |                         coAuthors=[co_author.name for co_author in commit.co_authors],  # noqa: E501
    |                                                                                         ^^^^^^^^^^^^ RUF100
145 |                         coAuthorEmails=[
146 |                             co_author.email for co_author in commit.co_authors
    |
    = help: Remove unused `noqa` directive

src/api/vcs.py:164:9: D102 Missing docstring in public method
    |
162 |         return DataFrame(data=data)
163 |
164 |     def get_release_revisions(self) -> DataFrame:
    |         ^^^^^^^^^^^^^^^^^^^^^ D102
165 |         data: dict[str, List[str]] = {"commit_hash_id": []}
    |

src/api/vcs.py:165:25: UP006 Use `list` instead of `List` for type annotation
    |
164 |     def get_release_revisions(self) -> DataFrame:
165 |         data: dict[str, List[str]] = {"commit_hash_id": []}
    |                         ^^^^ UP006
166 |
167 |         tags: List[TagReference] = self.repo.tags
    |
    = help: Replace with `list`

src/api/vcs.py:167:15: UP006 Use `list` instead of `List` for type annotation
    |
165 |         data: dict[str, List[str]] = {"commit_hash_id": []}
166 |
167 |         tags: List[TagReference] = self.repo.tags
    |               ^^^^ UP006
168 |
169 |         tagRef: TagReference
    |
    = help: Replace with `list`

src/api/vcs.py:169:9: N806 Variable `tagRef` in function should be lowercase
    |
167 |         tags: List[TagReference] = self.repo.tags
168 |
169 |         tagRef: TagReference
    |         ^^^^^^ N806
170 |         for tagRef in tags:
171 |             try:
    |

src/api/vcs.py:170:13: N806 Variable `tagRef` in function should be lowercase
    |
169 |         tagRef: TagReference
170 |         for tagRef in tags:
    |             ^^^^^^ N806
171 |             try:
172 |                 tagRef.commit
    |

src/api/vcs.py:172:17: B018 Found useless expression. Either assign it to a variable or remove it.
    |
170 |         for tagRef in tags:
171 |             try:
172 |                 tagRef.commit
    |                 ^^^^^^^^^^^^^ B018
173 |             except ValueError:
174 |                 continue
    |

src/api/vcs.py:180:9: D102 Missing docstring in public method
    |
178 |         return DataFrame(data=data)
179 |
180 |     def checkout_revision(self, revision_hash: str) -> None:
    |         ^^^^^^^^^^^^^^^^^ D102
181 |         commit: Commit = self.repo.commit(rev=revision_hash)
182 |         self.repo.git.checkout(commit)
    |

src/api/vcs.py:184:9: ANN201 Missing return type annotation for public function `checkout_most_recent_revision`
    |
182 |         self.repo.git.checkout(commit)
183 |
184 |     def checkout_most_recent_revision(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
185 |         self.checkout_revision(revision_hash=self.repo.head.commit.hexsha)
    |
    = help: Add return type annotation: `None`

src/api/vcs.py:184:9: D102 Missing docstring in public method
    |
182 |         self.repo.git.checkout(commit)
183 |
184 |     def checkout_most_recent_revision(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
185 |         self.checkout_revision(revision_hash=self.repo.head.commit.hexsha)
    |

src/api/vcs.py:188:5: N802 Function name `identifyVCS` should be lowercase
    |
188 | def identifyVCS(repoPath: Path) -> VersionControlSystem | int:
    |     ^^^^^^^^^^^ N802
189 |     try:
190 |         return Git(repo_path=repoPath)
    |

src/api/vcs.py:188:5: D103 Missing docstring in public function
    |
188 | def identifyVCS(repoPath: Path) -> VersionControlSystem | int:
    |     ^^^^^^^^^^^ D103
189 |     try:
190 |         return Git(repo_path=repoPath)
    |

src/api/vcs.py:188:17: N803 Argument name `repoPath` should be lowercase
    |
188 | def identifyVCS(repoPath: Path) -> VersionControlSystem | int:
    |                 ^^^^^^^^^^^^^^ N803
189 |     try:
190 |         return Git(repo_path=repoPath)
    |

src/api/vcs.py:195:5: N802 Function name `parseVCS` should be lowercase
    |
195 | def parseVCS(
    |     ^^^^^^^^ N802
196 |     vcs: VersionControlSystem,
197 |     previousRevisions: DataFrame | None,
    |

src/api/vcs.py:195:5: D103 Missing docstring in public function
    |
195 | def parseVCS(
    |     ^^^^^^^^ D103
196 |     vcs: VersionControlSystem,
197 |     previousRevisions: DataFrame | None,
    |

src/api/vcs.py:197:5: N803 Argument name `previousRevisions` should be lowercase
    |
195 | def parseVCS(
196 |     vcs: VersionControlSystem,
197 |     previousRevisions: DataFrame | None,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
198 | ) -> dict[str, DataFrame]:
199 |     data: dict[str:DataFrame] = {}
    |

src/api/vcs.py:202:16: UP006 Use `tuple` instead of `Tuple` for type annotation
    |
201 |     # Extract the commit log and release revisions
202 |     revisions: Tuple[Any, int] = vcs.get_revisions()
    |                ^^^^^ UP006
203 |     releasesDF: DataFrame = vcs.get_release_revisions()
204 |     commitLogDF: DataFrame = vcs.parse_revisions(revisions=revisions)
    |
    = help: Replace with `tuple`

src/api/vcs.py:203:5: N806 Variable `releasesDF` in function should be lowercase
    |
201 |     # Extract the commit log and release revisions
202 |     revisions: Tuple[Any, int] = vcs.get_revisions()
203 |     releasesDF: DataFrame = vcs.get_release_revisions()
    |     ^^^^^^^^^^ N806
204 |     commitLogDF: DataFrame = vcs.parse_revisions(revisions=revisions)
    |

src/api/vcs.py:204:5: N806 Variable `commitLogDF` in function should be lowercase
    |
202 |     revisions: Tuple[Any, int] = vcs.get_revisions()
203 |     releasesDF: DataFrame = vcs.get_release_revisions()
204 |     commitLogDF: DataFrame = vcs.parse_revisions(revisions=revisions)
    |     ^^^^^^^^^^^ N806
205 |
206 |     # Remove previously stored revisions from DataFrames
    |

src/api/vcs.py:208:9: N806 Variable `commitLogDF` in function should be lowercase
    |
206 |     # Remove previously stored revisions from DataFrames
207 |     if isinstance(previousRevisions, DataFrame):
208 |         commitLogDF = commitLogDF[
    |         ^^^^^^^^^^^ N806
209 |             ~commitLogDF["commit_hash"].isin(previousRevisions["commit_hash"])  # noqa: E712
210 |         ]
    |

src/api/vcs.py:209:81: RUF100 Unused `noqa` directive (unused: `E712`)
    |
207 |     if isinstance(previousRevisions, DataFrame):
208 |         commitLogDF = commitLogDF[
209 |             ~commitLogDF["commit_hash"].isin(previousRevisions["commit_hash"])  # noqa: E712
    |                                                                                 ^^^^^^^^^^^^ RUF100
210 |         ]
211 |         releasesDF = releasesDF[
    |
    = help: Remove unused `noqa` directive

src/api/vcs.py:211:9: N806 Variable `releasesDF` in function should be lowercase
    |
209 |             ~commitLogDF["commit_hash"].isin(previousRevisions["commit_hash"])  # noqa: E712
210 |         ]
211 |         releasesDF = releasesDF[
    |         ^^^^^^^^^^ N806
212 |             ~releasesDF["commit_hash_id"].isin(previousRevisions["commit_hash"])  # noqa: E712
213 |         ]
    |

src/api/vcs.py:212:83: RUF100 Unused `noqa` directive (unused: `E712`)
    |
210 |         ]
211 |         releasesDF = releasesDF[
212 |             ~releasesDF["commit_hash_id"].isin(previousRevisions["commit_hash"])  # noqa: E712
    |                                                                                   ^^^^^^^^^^^^ RUF100
213 |         ]
    |
    = help: Remove unused `noqa` directive

src/api/vcs.py:232:5: N806 Variable `releasesDF` in function should be lowercase
    |
231 |     # Replace commit log information with the index to static DataFrames
232 |     releasesDF = replaceDFValueInColumnWithIndexReference(
    |     ^^^^^^^^^^ N806
233 |         df1=releasesDF,
234 |         df2=data["commit_hashes"],
    |

src/api/vcs.py:238:5: N806 Variable `releasesDF` in function should be lowercase
    |
236 |         df2Col="commit_hash",
237 |     )
238 |     releasesDF = releasesDF.dropna(how="any", ignore_index=True)
    |     ^^^^^^^^^^ N806
239 |     releasesDF["commit_hash_id"] = releasesDF["commit_hash_id"].apply(int)
    |

src/api/vcs.py:241:5: N806 Variable `commitLogDF` in function should be lowercase
    |
239 |     releasesDF["commit_hash_id"] = releasesDF["commit_hash_id"].apply(int)
240 |
241 |     commitLogDF = replaceDFValueInColumnWithIndexReference(
    |     ^^^^^^^^^^^ N806
242 |         df1=commitLogDF,
243 |         df2=data["commit_hashes"],
    |

src/api/vcs.py:247:5: N806 Variable `commitLogDF` in function should be lowercase
    |
245 |         df2Col="commit_hash",
246 |     )
247 |     commitLogDF = replaceDFValueInColumnWithIndexReference(
    |     ^^^^^^^^^^^ N806
248 |         df1=commitLogDF,
249 |         df2=data["authors"],
    |

src/api/vcs.py:253:5: N806 Variable `commitLogDF` in function should be lowercase
    |
251 |         df2Col="author_email",
252 |     )
253 |     commitLogDF = replaceDFValueInColumnWithIndexReference(
    |     ^^^^^^^^^^^ N806
254 |         df1=commitLogDF,
255 |         df2=data["committers"],
    |

src/api/vcs.py:262:5: N806 Variable `commitLogDF` in function should be lowercase
    |
260 |     # Replace commit log information with a list of indicies from static
261 |     # DataFrames
262 |     commitLogDF = replaceDFValueInColumnWithListOfIndexReferences(
    |     ^^^^^^^^^^^ N806
263 |         df1=commitLogDF,
264 |         df2=data["authors"],
    |

src/api/vcs.py:268:5: N806 Variable `commitLogDF` in function should be lowercase
    |
266 |         df2Col="author_email",
267 |     )
268 |     commitLogDF = replaceDFValueInColumnWithListOfIndexReferences(
    |     ^^^^^^^^^^^ N806
269 |         df1=commitLogDF,
270 |         df2=data["commit_hashes"],
    |

src/api/vcs.py:279:9: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
277 |     commitLogDF.drop(
278 |         columns=["author", "committer", "co_authors"],
279 |         inplace=True,
    |         ^^^^^^^^^^^^ PD002
280 |     )
281 |     commitLogDF.rename(
    |
    = help: Assign to variable; remove `inplace` arg

src/api/vcs.py:289:9: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
287 |             "parents": "parent_hash_ids",
288 |         },
289 |         inplace=True,
    |         ^^^^^^^^^^^^ PD002
290 |     )
    |
    = help: Assign to variable; remove `inplace` arg

src/cli.py:1:1: D100 Missing docstring in public module
src/cli.py:1:1: CPY001 Missing copyright notice at top of file
src/cli.py:9:5: D205 1 blank line required between summary line and description
   |
 8 |   class CLI:
 9 | /     """
10 | |     A helper class to manage argument parsing using the argparse module.
11 | |     Provides a more structured way to define and handle command-line arguments.
12 | |     """
   | |_______^ D205
13 |
14 |       def __init__(self) -> None:
   |
   = help: Insert single blank line

src/cli.py:9:5: D212 Multi-line docstring summary should start at the first line
   |
 8 |   class CLI:
 9 | /     """
10 | |     A helper class to manage argument parsing using the argparse module.
11 | |     Provides a more structured way to define and handle command-line arguments.
12 | |     """
   | |_______^ D212
13 |
14 |       def __init__(self) -> None:
   |
   = help: Remove whitespace after opening quotes

src/cli.py:14:9: D107 Missing docstring in `__init__`
   |
12 |     """
13 |
14 |     def __init__(self) -> None:
   |         ^^^^^^^^ D107
15 |         self.parser: ArgumentParser = ArgumentParser(
16 |             prog=src.PROG,
   |

src/cli.py:24:21: PLW1514 `open` in text mode without explicit `encoding` argument
   |
22 |             "--version",
23 |             action="version",
24 |             version=open(file=Path(sys._MEIPASS, "_version")).read().strip(),
   |                     ^^^^ PLW1514
25 |         )
   |
   = help: Add explicit `encoding` argument

src/cli.py:24:21: SIM115 Use a context manager for opening files
   |
22 |             "--version",
23 |             action="version",
24 |             version=open(file=Path(sys._MEIPASS, "_version")).read().strip(),
   |                     ^^^^ SIM115
25 |         )
   |

src/cli.py:24:21: PTH123 `open()` should be replaced by `Path.open()`
   |
22 |             "--version",
23 |             action="version",
24 |             version=open(file=Path(sys._MEIPASS, "_version")).read().strip(),
   |                     ^^^^ PTH123
25 |         )
   |

src/cli.py:38:9: D200 One-line docstring should fit on one line
   |
37 |       def vcs_subparser(self) -> ArgumentParser:
38 | /         """
39 | |         Defines the VCS subparser with its arguments.
40 | |         """
   | |___________^ D200
41 |
42 |           vcsParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Reformat to one line

src/cli.py:38:9: D202 No blank lines allowed after function docstring (found 1)
   |
37 |       def vcs_subparser(self) -> ArgumentParser:
38 | /         """
39 | |         Defines the VCS subparser with its arguments.
40 | |         """
   | |___________^ D202
41 |
42 |           vcsParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Remove blank line(s) after function docstring

src/cli.py:38:9: D212 Multi-line docstring summary should start at the first line
   |
37 |       def vcs_subparser(self) -> ArgumentParser:
38 | /         """
39 | |         Defines the VCS subparser with its arguments.
40 | |         """
   | |___________^ D212
41 |
42 |           vcsParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Remove whitespace after opening quotes

src/cli.py:38:9: D401 First line of docstring should be in imperative mood: "Defines the VCS subparser with its arguments."
   |
37 |       def vcs_subparser(self) -> ArgumentParser:
38 | /         """
39 | |         Defines the VCS subparser with its arguments.
40 | |         """
   | |___________^ D401
41 |
42 |           vcsParser: ArgumentParser = self.subparsers.add_parser(
   |

src/cli.py:38:9: DOC201 `return` is not documented in docstring
   |
37 |       def vcs_subparser(self) -> ArgumentParser:
38 | /         """
39 | |         Defines the VCS subparser with its arguments.
40 | |         """
   | |___________^ DOC201
41 |
42 |           vcsParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Add a "Returns" section to the docstring

src/cli.py:42:9: N806 Variable `vcsParser` in function should be lowercase
   |
40 |         """
41 |
42 |         vcsParser: ArgumentParser = self.subparsers.add_parser(
   |         ^^^^^^^^^ N806
43 |             name="vcs",
44 |             help="Parse a project's version control system for project metadata",  # noqa: E501
   |

src/cli.py:44:84: RUF100 Unused `noqa` directive (unused: `E501`)
   |
42 |         vcsParser: ArgumentParser = self.subparsers.add_parser(
43 |             name="vcs",
44 |             help="Parse a project's version control system for project metadata",  # noqa: E501
   |                                                                                    ^^^^^^^^^^^^ RUF100
45 |             prog=f"{src.PROG} vcs",
46 |             epilog=src.EPILOG,
   |
   = help: Remove unused `noqa` directive

src/cli.py:71:9: D200 One-line docstring should fit on one line
   |
70 |       def size_subparser(self) -> ArgumentParser:
71 | /         """
72 | |         Defines the size subparser with its arguments.
73 | |         """
   | |___________^ D200
74 |
75 |           sizeParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Reformat to one line

src/cli.py:71:9: D202 No blank lines allowed after function docstring (found 1)
   |
70 |       def size_subparser(self) -> ArgumentParser:
71 | /         """
72 | |         Defines the size subparser with its arguments.
73 | |         """
   | |___________^ D202
74 |
75 |           sizeParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Remove blank line(s) after function docstring

src/cli.py:71:9: D212 Multi-line docstring summary should start at the first line
   |
70 |       def size_subparser(self) -> ArgumentParser:
71 | /         """
72 | |         Defines the size subparser with its arguments.
73 | |         """
   | |___________^ D212
74 |
75 |           sizeParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Remove whitespace after opening quotes

src/cli.py:71:9: D401 First line of docstring should be in imperative mood: "Defines the size subparser with its arguments."
   |
70 |       def size_subparser(self) -> ArgumentParser:
71 | /         """
72 | |         Defines the size subparser with its arguments.
73 | |         """
   | |___________^ D401
74 |
75 |           sizeParser: ArgumentParser = self.subparsers.add_parser(
   |

src/cli.py:71:9: DOC201 `return` is not documented in docstring
   |
70 |       def size_subparser(self) -> ArgumentParser:
71 | /         """
72 | |         Defines the size subparser with its arguments.
73 | |         """
   | |___________^ DOC201
74 |
75 |           sizeParser: ArgumentParser = self.subparsers.add_parser(
   |
   = help: Add a "Returns" section to the docstring

src/cli.py:75:9: N806 Variable `sizeParser` in function should be lowercase
   |
73 |         """
74 |
75 |         sizeParser: ArgumentParser = self.subparsers.add_parser(
   |         ^^^^^^^^^^ N806
76 |             name="size",
77 |             help="Measure the size of repository by lines of code",
   |

src/cli.py:104:9: D200 One-line docstring should fit on one line
    |
103 |       def parse_args(self) -> Namespace:
104 | /         """
105 | |         Parses the command-line arguments.
106 | |         """
    | |___________^ D200
107 |           self.args = self.parser.parse_args()
108 |           return self.args
    |
    = help: Reformat to one line

src/cli.py:104:9: D212 Multi-line docstring summary should start at the first line
    |
103 |       def parse_args(self) -> Namespace:
104 | /         """
105 | |         Parses the command-line arguments.
106 | |         """
    | |___________^ D212
107 |           self.args = self.parser.parse_args()
108 |           return self.args
    |
    = help: Remove whitespace after opening quotes

src/cli.py:104:9: D401 First line of docstring should be in imperative mood: "Parses the command-line arguments."
    |
103 |       def parse_args(self) -> Namespace:
104 | /         """
105 | |         Parses the command-line arguments.
106 | |         """
    | |___________^ D401
107 |           self.args = self.parser.parse_args()
108 |           return self.args
    |

src/cli.py:104:9: DOC201 `return` is not documented in docstring
    |
103 |       def parse_args(self) -> Namespace:
104 | /         """
105 | |         Parses the command-line arguments.
106 | |         """
    | |___________^ DOC201
107 |           self.args = self.parser.parse_args()
108 |           return self.args
    |
    = help: Add a "Returns" section to the docstring

src/cli.py:114:5: T201 `print` found
    |
112 |     cli: CLI = CLI()
113 |
114 |     print(cli.parse_args())
    |     ^^^^^ T201
    |
    = help: Remove `print`

src/main.py:1:1: D100 Missing docstring in public module
src/main.py:1:1: CPY001 Missing copyright notice at top of file
src/main.py:21:5: N802 Function name `getNameSpaceKey` should be lowercase
   |
21 | def getNameSpaceKey(ns: dict[str, Any]) -> str:
   |     ^^^^^^^^^^^^^^^ N802
22 |     return set([key.split(".")[0] for key in ns.keys()]).pop()
   |

src/main.py:21:5: D103 Missing docstring in public function
   |
21 | def getNameSpaceKey(ns: dict[str, Any]) -> str:
   |     ^^^^^^^^^^^^^^^ D103
22 |     return set([key.split(".")[0] for key in ns.keys()]).pop()
   |

src/main.py:22:12: C403 Unnecessary list comprehension (rewrite as a set comprehension)
   |
21 | def getNameSpaceKey(ns: dict[str, Any]) -> str:
22 |     return set([key.split(".")[0] for key in ns.keys()]).pop()
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C403
   |
   = help: Rewrite as a set comprehension

src/main.py:22:39: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
21 | def getNameSpaceKey(ns: dict[str, Any]) -> str:
22 |     return set([key.split(".")[0] for key in ns.keys()]).pop()
   |                                       ^^^^^^^^^^^^^^^^ SIM118
   |
   = help: Remove `.keys()`

src/main.py:25:5: N802 Function name `handleDB` should be lowercase
   |
25 | def handleDB(ns: dict[str, Any], nsKey: str) -> DB | None:
   |     ^^^^^^^^ N802
26 |     nsKey: str = getNameSpaceKey(ns=ns)
   |

src/main.py:25:5: D103 Missing docstring in public function
   |
25 | def handleDB(ns: dict[str, Any], nsKey: str) -> DB | None:
   |     ^^^^^^^^ D103
26 |     nsKey: str = getNameSpaceKey(ns=ns)
   |

src/main.py:25:34: N803 Argument name `nsKey` should be lowercase
   |
25 | def handleDB(ns: dict[str, Any], nsKey: str) -> DB | None:
   |                                  ^^^^^^^^^^ N803
26 |     nsKey: str = getNameSpaceKey(ns=ns)
   |

src/main.py:26:5: N806 Variable `nsKey` in function should be lowercase
   |
25 | def handleDB(ns: dict[str, Any], nsKey: str) -> DB | None:
26 |     nsKey: str = getNameSpaceKey(ns=ns)
   |     ^^^^^ N806
27 |
28 |     match nsKey:
   |

src/main.py:37:5: N802 Function name `handleVCS` should be lowercase
   |
37 | def handleVCS(ns: dict[str, Any], db: DB) -> None:
   |     ^^^^^^^^^ N802
38 |     existingCommits: DataFrame = db.read_table(
39 |         table="commit_hashes",
   |

src/main.py:37:5: D103 Missing docstring in public function
   |
37 | def handleVCS(ns: dict[str, Any], db: DB) -> None:
   |     ^^^^^^^^^ D103
38 |     existingCommits: DataFrame = db.read_table(
39 |         table="commit_hashes",
   |

src/main.py:38:5: N806 Variable `existingCommits` in function should be lowercase
   |
37 | def handleVCS(ns: dict[str, Any], db: DB) -> None:
38 |     existingCommits: DataFrame = db.read_table(
   |     ^^^^^^^^^^^^^^^ N806
39 |         table="commit_hashes",
40 |         model=CommitHashes,
   |

src/main.py:43:5: N806 Variable `repoPath` in function should be lowercase
   |
41 |     )
42 |
43 |     repoPath: Path = Path(abspath(path=ns["vcs.input"][0]))
   |     ^^^^^^^^ N806
44 |     vcs: VersionControlSystem | int = identifyVCS(repoPath=repoPath)
45 |     if vcs == -1:
   |

src/main.py:43:27: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
41 |     )
42 |
43 |     repoPath: Path = Path(abspath(path=ns["vcs.input"][0]))
   |                           ^^^^^^^ PTH100
44 |     vcs: VersionControlSystem | int = identifyVCS(repoPath=repoPath)
45 |     if vcs == -1:
   |

src/main.py:64:5: N802 Function name `handleSize` should be lowercase
   |
64 | def handleSize(ns: dict[str, Any], db: DB) -> None:
   |     ^^^^^^^^^^ N802
65 |     commitsDF: DataFrame = db.read_table(
66 |         table="commit_hashes",
   |

src/main.py:64:5: D103 Missing docstring in public function
   |
64 | def handleSize(ns: dict[str, Any], db: DB) -> None:
   |     ^^^^^^^^^^ D103
65 |     commitsDF: DataFrame = db.read_table(
66 |         table="commit_hashes",
   |

src/main.py:65:5: N806 Variable `commitsDF` in function should be lowercase
   |
64 | def handleSize(ns: dict[str, Any], db: DB) -> None:
65 |     commitsDF: DataFrame = db.read_table(
   |     ^^^^^^^^^ N806
66 |         table="commit_hashes",
67 |         model=CommitHashes,
   |

src/main.py:70:5: N806 Variable `repoPath` in function should be lowercase
   |
68 |     )
69 |
70 |     repoPath: Path = Path(abspath(path=ns["size.input"][0]))
   |     ^^^^^^^^ N806
71 |     vcs: VersionControlSystem | int = identifyVCS(repoPath=repoPath)
72 |     if vcs == -1:
   |

src/main.py:70:27: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
68 |     )
69 |
70 |     repoPath: Path = Path(abspath(path=ns["size.input"][0]))
   |                           ^^^^^^^ PTH100
71 |     vcs: VersionControlSystem | int = identifyVCS(repoPath=repoPath)
72 |     if vcs == -1:
   |

src/main.py:75:5: F841 Local variable `df` is assigned to but never used
   |
73 |         sys.exit(2)
74 |
75 |     df: DataFrame = compute_size_of_repo(commitsDF=commitsDF, vcs=vcs)
   |     ^^ F841
   |
   = help: Remove assignment to unused variable `df`

src/main.py:78:5: D103 Missing docstring in public function
   |
78 | def main() -> None:
   |     ^^^^ D103
79 |     cli: CLI = CLI()
80 |     ns: dict[str, Any] = cli.parse_args().__dict__
   |

src/main.py:82:9: N806 Variable `nsKey` in function should be lowercase
   |
80 |     ns: dict[str, Any] = cli.parse_args().__dict__
81 |     try:
82 |         nsKey: str = getNameSpaceKey(ns=ns)
   |         ^^^^^ N806
83 |     except KeyError:
84 |         sys.exit(1)
   |

Found 151 errors.

ruff format..............................................................Passed
bandit...................................................................Passed
mdformat.............................................(no files to check)Skipped
